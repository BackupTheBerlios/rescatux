#!/bin/bash
# Rescapp Update-grub run script
# Copyright Adrian Gibanel Lopez
# Licensed under the GNU PUBLIC LICENSE 3.0

set -x
set -v

function etc_issue() {

  local ETC_ISSUE_PATH="/etc/issue"
  local PARTITION_TO_MOUNT=$1
  local n_partition=${PARTITION_TO_MOUNT}

        TMP_MNT_PARTITION=${RESCATUX_ROOT_MNT}/${n_partition}
        TMP_DEV_PARTITION=/dev/${n_partition}
        mkdir --parents ${TMP_MNT_PARTITION}
        if $(mount -t auto ${TMP_DEV_PARTITION} ${TMP_MNT_PARTITION} 2> /dev/null) ; then
                #echo -e -n "Detectada particion: ${n_partition}\n";
                if [[ -e ${TMP_MNT_PARTITION}${ETC_ISSUE_PATH} ]] ; then
                  #echo -e -n "Detectado grub-install en particion: ${n_partition}\n"
		  echo $(head -n 1 ${TMP_MNT_PARTITION}${ETC_ISSUE_PATH} | sed -e 's/\\. //g' -e 's/\\.//g' -e 's/^[ \t]*//' -e 's/\ /-/g' -e 's/\ \ /-/g' -e 's/\n/-/g')
		else
		  echo "Not detected"
                fi
                umount ${TMP_MNT_PARTITION};
	else
		echo "Can't mount!"
        fi



} # function etc_issue() end


# First of all let decide the user to rename their hard disks to meet their possible different mapping at hard disk installation  - BEGIN

PROC_PARTITIONS_FILE=/proc/partitions


TARGET_PARTITIONS=$(awk '{print $4}' ${PROC_PARTITIONS_FILE} | sed -e '/name/d' -e '/^$/d' -e '/[1-9]/!d')

DETECTED_HARD_DISKS=""
ans=$(echo ${TARGET_PARTITIONS} | sed 's/[0-9][0-9]*//g' | tr ' ' '\n' | uniq | tr '\n' ' ')
DETECTED_HARD_DISKS="$ans"
echo -e -n "DEBUG: detected hard disks: ${DETECTED_HARD_DISKS}\n"

mkdir /dev/new

# Let's loop on detected hard disks so that user can rename them
for n_hard_disk in ${DETECTED_HARD_DISKS} ; do

  new_hard_disk_name=$(zenity ${ZENITY_COMMON_OPTIONS}  --entry --title="Rename hard disk if needed" --text="Detected: ${n_hard_disk}" --entry-text="${n_hard_disk}");

  ln -s /dev/${n_hard_disk} /dev/new/${new_hard_disk_name}
  for n_partition in /dev/* ; do
    actual_partition=$(echo "${n_partition}" | sed 's%/dev/%%g')
    test_partition=$(echo ${actual_partition} | grep ${n_hard_disk})
    partition_number=$(echo ${test_partition} | sed "s%${n_hard_disk}%%g")
    if [[ "${test_partition}x" != "x" ]] ; then
	ln -s /dev/${n_hard_disk}${partition_number} /dev/new/${new_hard_disk_name}${partition_number}
    fi
  done
done


# We are going to redefine TARGET_PARTITIONS with user choosen hard disks
TARGET_PARTITIONS=""
# Let's move some partitions
for n_partition in /dev/new/* ; do
  new_partition=$(echo $n_partition | sed 's%/dev/new/%%g')
  old_partition=$(readlink ${n_partition})
  mv $old_partition /dev/${new_partition}
  TARGET_PARTITIONS="${TARGET_PARTITIONS} ${new_partition}"

done




# First of all let decide the user to rename their hard disks to meet their possible different mapping at hard disk installation  - END

# TODO: Program check runtime (Maybe to be stolen from bootinfoscript)




echo $TARGET_PARTITIONS

#SBIN_GRUB_PARTITIONS=""
RESCATUX_ROOT_MNT=/mnt/rescatux
LINUX_OS_DETECTOR="/etc/issue"
#GRUB_INSTALL_BINARY=/etc/issue
GRUB_INSTALL_BINARY=grub-install
UPDATE_GRUB_BINARY=update-grub

#for n_partition in ${TARGET_PARTITIONS}; do
#	TMP_MNT_PARTITION=${RESCATUX_ROOT_MNT}/${n_partition}
#	TMP_DEV_PARTITION=/dev/${n_partition}
#	mkdir --parents ${TMP_MNT_PARTITION}
#	if $(mount -t auto ${TMP_DEV_PARTITION} ${TMP_MNT_PARTITION} 2> /dev/null) ; then
#		#echo -e -n "Detectada particion: ${n_partition}\n";
#		if [[ -e ${TMP_MNT_PARTITION}${LINUX_OS_DETECTOR} ]] ; then
#		  #echo -e -n "Detectado grub-install en particion: ${n_partition}\n"
#		  SBIN_GRUB_PARTITIONS="${SBIN_GRUB_PARTITIONS} ${n_partition}"
#		fi
#		umount ${TMP_MNT_PARTITION};
#	fi
#done

#echo -e -n "Detected grub-install partitions: ${SBIN_GRUB_PARTITIONS}\n"





# MAIN PROGRAM

# TODO: FETCH WIDTH AND HEIGHT FROM COMMAND LINE OR SO

GRUB_INSTALL_MBR_WIDTH="600"
GRUB_INSTALL_MBR_HEIGHT="400"
ZENITY_COMMON_OPTIONS="--width=${GRUB_INSTALL_MBR_WIDTH} --height=${GRUB_INSTALL_MBR_HEIGHT}"

TMP_FOLDER="/tmp"
DEVICE_MAP_NUMBERED_FILE="${TMP_FOLDER}/device.map.numbered"
DEVICE_MAP_RESCATUX_STR="device.map.rescatux"
DEVICE_MAP_BACKUP_STR="device.map.rescatux.backup"

#alias zenity = 'zenity ${ZENITY_COMMON_OPTIONS}' # It does not seem to work
# Select one of the partitions - BEGIN

n=0
LIST_VALUES=""
DESC_VALUES=""
for n_partition in ${TARGET_PARTITIONS}; do
  issue_value=`etc_issue ${n_partition}`
  issue_value=$(echo $issue_value | sed 's/\ /\-/')
  issue_value=$(echo $issue_value | sed 's/ /\-/')
  
  if [[ n -eq 0 ]] ; then
    LIST_VALUES="TRUE ${n_partition} ${issue_value}"
  else
    LIST_VALUES="${LIST_VALUES} FALSE ${n_partition} ${issue_value}"
  fi
let n=n+1
done

echo -e -n "a: $LIST_VALUES\n"

ans=$(zenity ${ZENITY_COMMON_OPTIONS}  --list  --text "Which partition do you want to Filesystem check with automatic fix?\n Please be patient. \nWhenever filesystem is finished a window will appear." --radiolist  --column "Select" --column "Partition" --column "Desc" ${LIST_VALUES}); echo $ans
# Lets suppose that selected partition is: sda3
SELECTED_PARTITION="$ans"
# Select one of the partitions - END


n_partition=${SELECTED_PARTITION}

if ( fsck /dev/stdout -fy /dev/${SELECTED_PARTITION} | tee >(zenity ${ZENITY_COMMON_OPTIONS} --text "Running forced filesystem check and fix" --progress --pulsate) >> /dev/stdout ) ; then
	zenity ${ZENITY_COMMON_OPTIONS} --info --title="Success!" --text="Filesystem check with automatic fix was OK! :)";
else 
	zenity ${ZENITY_COMMON_OPTIONS} --info --title="Failure!" --text="Filesystem check with automatic fix went wrong! :(";
fi
